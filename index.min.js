(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Quiet.setProfilesPrefix("./");
Quiet.setMemoryInitializerPrefix("./");
Quiet.setLibfecPrefix("./");

var PROFILE = 'audible-bad';
var transmit;
var recvBuffer = new Uint8Array(0);

var MY_DEVICE_ID = Math.floor(Math.random() * 2147483647);
console.log("device=", MY_DEVICE_ID);

function concatBuffers(a, b) {
  var tmp = new Uint8Array(a.byteLength + b.byteLength);
  tmp.set(new Uint8Array(a), 0);
  tmp.set(new Uint8Array(b), a.byteLength);
  return tmp.buffer;
}

var quietReady = new Promise(function (resolve, reject) {
  Quiet.addReadyCallback(function () {
    transmit = Quiet.transmitter(PROFILE);
    Quiet.receiver(PROFILE, function (payload) {
      recvBuffer = concatBuffers(recvBuffer, payload);
      var dataView = new DataView(recvBuffer);
      //console.log('received data', recvBuffer.byteLength, new Uint8Array(recvBuffer));
      if (dataView.byteLength < 8) {
        //console.log('not enough length');
        return;
      } else {
        var deviceId = dataView.getUint32(0);
        var messageLength = dataView.getUint32(4);
        //console.log('device=',deviceId, 'len', messageLength)
        if (dataView.byteLength < 8 + messageLength) {
          //console.log('not enough message');
          return; // Still waiting for part of the message.
        } else {
          // We have the whole message!
          var message = recvBuffer.slice(8, 8 + messageLength);
          recvBuffer = recvBuffer.slice(8 + messageLength);
          if (deviceId === MY_DEVICE_ID) {
            //console.log("IGNORING SELF MESSAGE");
            return;
          }
          console.log('Message from', deviceId, '-', Quiet.ab2str(message));
          var json = JSON.parse(Quiet.ab2str(message));
          console.log('Received JSON:', json);
          window.dispatchEvent(new CustomEvent('recv', { detail: json }));
        }
      }
    }, function (err) {
      console.error('Failed to create receiver:', err);
    }, function (numFails) {
      console.error('Failed to receive message', numFails);
    });
    resolve();
  }, function (err) {
    console.error('Quiet failed to initialize:', err);
    reject(err);
  });
});

function rawSend(str) {
  return new Promise(function (resolve) {
    var dataBuffer = Quiet.str2ab(JSON.stringify(str));
    var array = new Uint8Array(8 + dataBuffer.byteLength);
    var view = new DataView(array.buffer);
    view.setUint32(0, MY_DEVICE_ID);
    view.setUint32(4, dataBuffer.byteLength);
    array.set(new Uint8Array(dataBuffer), 8);
    console.log('Send:', JSON.stringify(str));
    //console.log('transmitting data', array);
    transmit(array, resolve);
  });
}

var origlog = console.log.bind(console);
console.log = function () {
  var p = document.createElement('div');
  p.textContent = Array.prototype.slice.call(arguments).join(' ');
  document.body.appendChild(p);
  origlog(p);
};

var Sensor = function () {
  function Sensor() {
    var _this = this;

    _classCallCheck(this, Sensor);

    this.readyPromise = Promise.resolve();
    addEventListener('recv', function (event) {
      _this.readyPromise = _this.readyPromise.then(function () {
        _this.handleMessage(event.detail);
      });
    });

    this.statusDiv = document.querySelector('#sensorStatus');
  }

  _createClass(Sensor, [{
    key: "send",
    value: function send(data) {
      this.readyPromise = this.readyPromise.then(function () {
        return rawSend(data);
      });
    }
  }, {
    key: "handleMessage",
    value: function handleMessage(data) {
      var _this2 = this;

      console.log('sensor handleMessage', data);
      if (data.type === 'list-ssids') {
        this.statusDiv.textContent = 'Sending SSID list...';
        this.send({
          type: 'ssids',
          ssids: ['hi', 'ho']
        });
      } else if (data.type === 'setup') {
        this.statusDiv.textContent = 'Received valid password!';
        setTimeout(function () {
          _this2.send({
            type: 'setup-ok',
            ssid: data.ssid
          });
        }, 300);
      }
    }
  }]);

  return Sensor;
}();

var Phone = function () {
  function Phone() {
    var _this3 = this;

    _classCallCheck(this, Phone);

    this.readyPromise = Promise.resolve();
    addEventListener('recv', function (event) {
      _this3.readyPromise = _this3.readyPromise.then(function () {
        _this3.handleMessage(event.detail);
      });
    });

    this.ssidSelect = document.querySelector('#ssids');
    this.statusDiv = document.querySelector('#phoneStatus');
    this.statusDiv.textContent = 'Hold your phone near the sensor, with the volume up.';

    this.ssidSelect.onchange = function (event) {
      if (event.target.value) {
        _this3.initiateSetup(event.target.value);
      }
    };

    document.querySelector('#requestSsids').onclick = function () {
      _this3.send({ type: 'list-ssids' });
    };
  }

  _createClass(Phone, [{
    key: "send",
    value: function send(data) {
      this.readyPromise = this.readyPromise.then(function () {
        return rawSend(data);
      });
    }
  }, {
    key: "handleMessage",
    value: function handleMessage(data) {
      console.log('phone handleMessage', data);
      if (data.type === 'ssids') {
        this.statusDiv.textContent = 'Got list of SSIDs. Please select a network.';
        this.populateSsids(data.ssids);
      } else if (data.type === 'setup-ok') {
        this.statusDiv.textContent = 'Connected!';
      }
    }
  }, {
    key: "initiateSetup",
    value: function initiateSetup(ssid) {
      var password = prompt("Enter the password for " + ssid + ":");
      if (!password) {
        this.ssidSelect.value = '';
        return;
      }
      this.statusDiv.textContent = 'Sending connection info...';
      this.send({
        type: 'setup',
        ssid: ssid,
        password: password
      });
    }
  }, {
    key: "populateSsids",
    value: function populateSsids(ssids) {
      document.documentElement.classList.add('has-ssids');
      var select = document.querySelector('#ssids');
      select.innerHTML = '<option value="">Select a Network</option>';
      ssids.forEach(function (ssid) {
        var option = document.createElement('option');
        option.textContent = ssid;
        select.appendChild(option);
      });
    }
  }]);

  return Phone;
}();

var domReady = new Promise(function (resolve) {
  window.addEventListener('DOMContentLoaded', function () {
    resolve();
  });
});

Promise.all([quietReady, domReady]).then(function () {
  var selector = document.getElementById('selector');
  document.getElementById('asSensor').onclick = function () {
    selector.parentNode.removeChild(selector);
    document.body.classList.add('as-sensor');
    window.sensor = new Sensor();
  };
  document.getElementById('asPhone').onclick = function () {
    selector.parentNode.removeChild(selector);
    document.body.classList.add('as-phone');
    window.phone = new Phone();
  };
});

},{}]},{},[1]);
